<?php
namespace UrlManager\Services;
/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface UrlManagerIf extends \RpcThrift\Services\RpcServiceBaseIf {
  /**
   * @param \UrlManager\Services\Request $request
   * @return \UrlManager\Services\ParseResult 集成OAuth认证&Router路由
   * 
   * @throws \RpcThrift\Services\RpcException
   */
  public function ParseRequest(\UrlManager\Services\Request $request);
  /**
   * @param string $action
   * @param array $params
   * @return string
   * @throws \RpcThrift\Services\RpcException
   */
  public function CreateUrl($action, array $params);
}


class UrlManagerClient extends \RpcThrift\Services\RpcServiceBaseClient implements \UrlManager\Services\UrlManagerIf {
  public function __construct($input, $output=null) {
    parent::__construct($input, $output);
  }

  public function ParseRequest(\UrlManager\Services\Request $request)
  {
    $this->send_ParseRequest($request);
    return $this->recv_ParseRequest();
  }

  public function send_ParseRequest(\UrlManager\Services\Request $request)
  {
    $args = new \UrlManager\Services\UrlManager_ParseRequest_args();
    $args->request = $request;
    if ($this->output_ instanceof TBinaryProtocol) {
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ParseRequest', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ParseRequest', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
    } else {
    sm_thrift_protocol_write_binary($this->output_, 'ParseRequest', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    } 
  }

  public function recv_ParseRequest()
  {
    if ($this->output_ instanceof TBinaryProtocol) {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\UrlManager\Services\UrlManager_ParseRequest_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \UrlManager\Services\UrlManager_ParseRequest_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    } else {
    $result = sm_thrift_protocol_read_binary($this->input_, '\UrlManager\Services\UrlManager_ParseRequest_result', $this->input_->isStrictRead());
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->re !== null) {
      throw $result->re;
    }
    throw new \Exception("ParseRequest failed: unknown result");
  }

  public function CreateUrl($action, array $params)
  {
    $this->send_CreateUrl($action, $params);
    return $this->recv_CreateUrl();
  }

  public function send_CreateUrl($action, array $params)
  {
    $args = new \UrlManager\Services\UrlManager_CreateUrl_args();
    $args->action = $action;
    $args->params = $params;
    if ($this->output_ instanceof TBinaryProtocol) {
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'CreateUrl', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('CreateUrl', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
    } else {
    sm_thrift_protocol_write_binary($this->output_, 'CreateUrl', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    } 
  }

  public function recv_CreateUrl()
  {
    if ($this->output_ instanceof TBinaryProtocol) {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\UrlManager\Services\UrlManager_CreateUrl_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \UrlManager\Services\UrlManager_CreateUrl_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    } else {
    $result = sm_thrift_protocol_read_binary($this->input_, '\UrlManager\Services\UrlManager_CreateUrl_result', $this->input_->isStrictRead());
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->re !== null) {
      throw $result->re;
    }
    throw new \Exception("CreateUrl failed: unknown result");
  }

}


// HELPER FUNCTIONS AND STRUCTURES

class UrlManager_ParseRequest_args {
  static $_TSPEC;

  /**
   * @var \UrlManager\Services\Request
   */
  public $request = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'request',
          'type' => TType::STRUCT,
          'class' => '\UrlManager\Services\Request',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
    }
  }

  public function getName() {
    return 'UrlManager_ParseRequest_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->request = new \UrlManager\Services\Request();
            $xfer += $this->request->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UrlManager_ParseRequest_args');
    if ($this->request !== null) {
      if (!is_object($this->request)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('request', TType::STRUCT, 1);
      $xfer += $this->request->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UrlManager_ParseRequest_result {
  static $_TSPEC;

  /**
   * @var \UrlManager\Services\ParseResult
   */
  public $success = null;
  /**
   * @var \RpcThrift\Services\RpcException
   */
  public $re = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\UrlManager\Services\ParseResult',
          ),
        1 => array(
          'var' => 're',
          'type' => TType::STRUCT,
          'class' => '\RpcThrift\Services\RpcException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['re'])) {
        $this->re = $vals['re'];
      }
    }
  }

  public function getName() {
    return 'UrlManager_ParseRequest_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \UrlManager\Services\ParseResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->re = new \RpcThrift\Services\RpcException();
            $xfer += $this->re->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UrlManager_ParseRequest_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->re !== null) {
      $xfer += $output->writeFieldBegin('re', TType::STRUCT, 1);
      $xfer += $this->re->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UrlManager_CreateUrl_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $action = null;
  /**
   * @var array
   */
  public $params = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'action',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'params',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['action'])) {
        $this->action = $vals['action'];
      }
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
    }
  }

  public function getName() {
    return 'UrlManager_CreateUrl_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->action);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->params = array();
            $_size18 = 0;
            $_ktype19 = 0;
            $_vtype20 = 0;
            $xfer += $input->readMapBegin($_ktype19, $_vtype20, $_size18);
            for ($_i22 = 0; $_i22 < $_size18; ++$_i22)
            {
              $key23 = '';
              $val24 = '';
              $xfer += $input->readString($key23);
              $xfer += $input->readString($val24);
              $this->params[$key23] = $val24;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UrlManager_CreateUrl_args');
    if ($this->action !== null) {
      $xfer += $output->writeFieldBegin('action', TType::STRING, 1);
      $xfer += $output->writeString($this->action);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->params !== null) {
      if (!is_array($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->params));
        {
          foreach ($this->params as $kiter25 => $viter26)
          {
            $xfer += $output->writeString($kiter25);
            $xfer += $output->writeString($viter26);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UrlManager_CreateUrl_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;
  /**
   * @var \RpcThrift\Services\RpcException
   */
  public $re = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 're',
          'type' => TType::STRUCT,
          'class' => '\RpcThrift\Services\RpcException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['re'])) {
        $this->re = $vals['re'];
      }
    }
  }

  public function getName() {
    return 'UrlManager_CreateUrl_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->re = new \RpcThrift\Services\RpcException();
            $xfer += $this->re->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UrlManager_CreateUrl_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->re !== null) {
      $xfer += $output->writeFieldBegin('re', TType::STRUCT, 1);
      $xfer += $this->re->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


