<?php
namespace UrlManager\Services;

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class OAuthUser {
  static $_TSPEC;

  /**
   * @var int
   */
  public $user_id = null;
  /**
   * @var string
   */
  public $oauth_key = null;
  /**
   * @var string
   */
  public $oauth_secret = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'oauth_key',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'oauth_secret',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['user_id'])) {
        $this->user_id = $vals['user_id'];
      }
      if (isset($vals['oauth_key'])) {
        $this->oauth_key = $vals['oauth_key'];
      }
      if (isset($vals['oauth_secret'])) {
        $this->oauth_secret = $vals['oauth_secret'];
      }
    }
  }

  public function getName() {
    return 'OAuthUser';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->user_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->oauth_key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->oauth_secret);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OAuthUser');
    if ($this->user_id !== null) {
      $xfer += $output->writeFieldBegin('user_id', TType::I64, 1);
      $xfer += $output->writeI64($this->user_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->oauth_key !== null) {
      $xfer += $output->writeFieldBegin('oauth_key', TType::STRING, 2);
      $xfer += $output->writeString($this->oauth_key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->oauth_secret !== null) {
      $xfer += $output->writeFieldBegin('oauth_secret', TType::STRING, 3);
      $xfer += $output->writeString($this->oauth_secret);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 输入和输出的结果
 */
class Request {
  static $_TSPEC;

  /**
   * @var string
   */
  public $http_method = null;
  /**
   * @var string
   */
  public $request_uri = null;
  /**
   * @var array
   */
  public $query_params = null;
  /**
   * @var string
   */
  public $authorization = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'http_method',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'request_uri',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'query_params',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'authorization',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['http_method'])) {
        $this->http_method = $vals['http_method'];
      }
      if (isset($vals['request_uri'])) {
        $this->request_uri = $vals['request_uri'];
      }
      if (isset($vals['query_params'])) {
        $this->query_params = $vals['query_params'];
      }
      if (isset($vals['authorization'])) {
        $this->authorization = $vals['authorization'];
      }
    }
  }

  public function getName() {
    return 'Request';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->http_method);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->request_uri);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->query_params = array();
            $_size0 = 0;
            $_ktype1 = 0;
            $_vtype2 = 0;
            $xfer += $input->readMapBegin($_ktype1, $_vtype2, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $key5 = '';
              $val6 = '';
              $xfer += $input->readString($key5);
              $xfer += $input->readString($val6);
              $this->query_params[$key5] = $val6;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->authorization);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Request');
    if ($this->http_method !== null) {
      $xfer += $output->writeFieldBegin('http_method', TType::STRING, 1);
      $xfer += $output->writeString($this->http_method);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->request_uri !== null) {
      $xfer += $output->writeFieldBegin('request_uri', TType::STRING, 2);
      $xfer += $output->writeString($this->request_uri);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->query_params !== null) {
      if (!is_array($this->query_params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('query_params', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->query_params));
        {
          foreach ($this->query_params as $kiter7 => $viter8)
          {
            $xfer += $output->writeString($kiter7);
            $xfer += $output->writeString($viter8);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->authorization !== null) {
      $xfer += $output->writeFieldBegin('authorization', TType::STRING, 4);
      $xfer += $output->writeString($this->authorization);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 集成OAuth认证&Router路由
 */
class ParseResult {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $succeed = null;
  /**
   * @var string
   */
  public $route = null;
  /**
   * @var \UrlManager\Services\OAuthUser
   */
  public $user_auth = null;
  /**
   * @var string
   */
  public $message = null;
  /**
   * @var array
   */
  public $params = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'succeed',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'route',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'user_auth',
          'type' => TType::STRUCT,
          'class' => '\UrlManager\Services\OAuthUser',
          ),
        4 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'params',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['succeed'])) {
        $this->succeed = $vals['succeed'];
      }
      if (isset($vals['route'])) {
        $this->route = $vals['route'];
      }
      if (isset($vals['user_auth'])) {
        $this->user_auth = $vals['user_auth'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['params'])) {
        $this->params = $vals['params'];
      }
    }
  }

  public function getName() {
    return 'ParseResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->succeed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->route);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->user_auth = new \UrlManager\Services\OAuthUser();
            $xfer += $this->user_auth->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::MAP) {
            $this->params = array();
            $_size9 = 0;
            $_ktype10 = 0;
            $_vtype11 = 0;
            $xfer += $input->readMapBegin($_ktype10, $_vtype11, $_size9);
            for ($_i13 = 0; $_i13 < $_size9; ++$_i13)
            {
              $key14 = '';
              $val15 = '';
              $xfer += $input->readString($key14);
              $xfer += $input->readString($val15);
              $this->params[$key14] = $val15;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ParseResult');
    if ($this->succeed !== null) {
      $xfer += $output->writeFieldBegin('succeed', TType::BOOL, 1);
      $xfer += $output->writeBool($this->succeed);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->route !== null) {
      $xfer += $output->writeFieldBegin('route', TType::STRING, 2);
      $xfer += $output->writeString($this->route);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_auth !== null) {
      if (!is_object($this->user_auth)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('user_auth', TType::STRUCT, 3);
      $xfer += $this->user_auth->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 4);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->params !== null) {
      if (!is_array($this->params)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('params', TType::MAP, 5);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->params));
        {
          foreach ($this->params as $kiter16 => $viter17)
          {
            $xfer += $output->writeString($kiter16);
            $xfer += $output->writeString($viter17);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

final class Constant extends \Thrift\Type\TConstant {
  static protected $VERSION;

  static protected function init_VERSION() {
    return "0.0.1";
  }
}


